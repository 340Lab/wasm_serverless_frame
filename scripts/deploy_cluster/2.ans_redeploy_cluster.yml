---
- hosts: localhost
  tasks:
    - name: Install Build Related
      include_tasks: ../install/2._ans_install_build.yml

    - name: Build sys and demo apps
      include_tasks: ../build/1._ans_build_sys_with_apps.yml

    - name: Generate Docker Compose File
      shell: python3 2.1_gen_each_node_compose.py

    - name: Move promtail.yaml to pack
      shell: mv promtail.yaml pack/

    # Preparing for next zip
    - name: Remove Zip
      file:
        path: deploy_pack.zip
        state: absent

    - name: Zip deploy_pack.zip (docker, scripts)
      # **/ means any path
      command: "zip -r deploy_pack.zip scripts -x **/random_words.txt"
      args:
        chdir: ../..

- hosts: web
  vars_prompt:
    - name: build_env
      prompt: "Do you want to rebuild the environment? (yes/no)"
      private: false
  tasks:
    - name: Debug file path
      debug:
        var: src
    
    - name: Stop & Remove container
      block:
      - name: Stop containers
        shell: docker ps -a | grep "wasm_serverless_deploy" | awk '{print $1}' | xargs docker stop
        become: yes
        ignore_errors: yes
      - name: Remove containers
        shell: docker ps -a | grep "wasm_serverless_deploy" | awk '{print $1}' | xargs docker rm
        become: yes
        ignore_errors: yes


    - name: Prepare remote files
      block:
      - name: Make sure the directory exists
        ansible.builtin.file:
          path: "{{ item }}"
          state: directory
        become: yes
        loop:
          - /root/wasm_serverless_deploy
      - name: Clear the target directory
        shell: rm -rf /root/wasm_serverless_deploy/*
        become: yes
      - name: Copy deploy_pack.zip to all nodes
        copy:
          src: ../../deploy_pack.zip
          dest: /root/wasm_serverless_deploy/deploy_pack.zip
        become: yes
      - name: Copy docker-compose.yml to all nodes
        copy:
          src: compose_{{ ansible_host }}.yml
          dest: /root/wasm_serverless_deploy/docker-compose.yml
        become: yes
      - name: Unzip deploy_pack.zip
        unarchive:
          src: /root/wasm_serverless_deploy/deploy_pack.zip
          dest: /root/wasm_serverless_deploy
          remote_src: yes
        become: yes
      - name: Remove zip
        file:
          path: /root/wasm_serverless_deploy/deploy_pack.zip
          state: absent
        become: yes
      - name: Move built pack to root
        shell: mv /root/wasm_serverless_deploy/scripts/deploy_cluster/pack/* /root/wasm_serverless_deploy/
        become: yes
      - name: Copy big files
        copy:
          src: pack/test_dir/files/random_words.txt
          dest: /root/wasm_serverless_deploy/test_dir/files/random_words.txt
        become: yes
      - name: Permission dir
        shell: chmod -R 775 /root/wasm_serverless_deploy
        become: yes
      - name: Debug deploy dir
        shell: tree /root/wasm_serverless_deploy

    
    - name: Install Basic
      shell: bash /root/wasm_serverless_deploy/scripts/install/1.install_basic.sh


    - name: Docker Stuff
      block:
      - name: Install docker
        shell: bash /root/wasm_serverless_deploy/scripts/install/install_docker.sh

      - name: Build the environment Docker image (conditionally)
        command: ./scripts/docker/WasmEdge/build_image.sh
        args:
          chdir: /root/wasm_serverless_deploy
        become: yes
        when: build_env == "yes"

      - name: Build the application Docker image
        command: ./scripts/docker/Waverless/build_image.sh
        args:
          chdir: /root/wasm_serverless_deploy
        become: yes

      - name: Kill processes occupying specific ports
        shell: sudo kill $(sudo lsof -t -i:{{ item }})
        become: yes
        ignore_errors: yes
        loop:
          - 2500
          - 2501
          - 2505
          - 2506

      - name: docker-compose
        command: docker-compose -v
        args:
          chdir: /root/wasm_serverless_deploy
        become: yes
      
      - name: Docker compose up
        command: docker-compose --compatibility up -d
        args:
          chdir: /root/wasm_serverless_deploy
        become: yes




    # - name: Check if the Docker compose configuration file exists
    #   stat:
    #     path: "/root/wasm_serverless_deploy/docker-compose.yml"
    #   register: compose_file

#     - name: Docker compose down if the configuration file exists
#       command: docker-compose down
#       args:
#         chdir: "/root/wasm_serverless_deploy"
#       become: yes
#       when: compose_file.stat.exists
#       ignore_errors: yes
    
#     - name: Copy compose_{ip}.yml to all nodes
#       copy:
#         src: ../deploy_cluster/compose_{{ ansible_host }}.yml
#         dest: /root/wasm_serverless_deploy/docker-compose.yml
#       become: yes
#     - name: Copy node_config.yaml to all nodes
#       copy:
#         src: ../deploy_cluster/node_config.yaml
#         dest: /root/wasm_serverless_deploy/files/node_config.yaml
#       become: yes
    
#     - name: Scripts
#       block:
#       - name: Copy Docker scripts to all nodes
#         copy:
#           src: ../../docker.zip
#           dest: /root/wasm_serverless_deploy/docker.zip
#         become: yes

#       - name: Unzip Docker scripts to all nodes
#         shell: rm -rf docker && unzip -q -o docker.zip && rm -f docker.zip && chmod -R 775 docker
#         args:
#           chdir: /root/wasm_serverless_deploy
#         become: yes

#       - name: Copy scripts to all nodes
#         copy:
#           src: ../../scripts.zip
#           dest: /root/wasm_serverless_deploy/scripts.zip
#         become: yes

#       - name: Unzip scripts to all nodes
#         shell: rm -rf scripts && unzip -q -o scripts.zip && rm -f scripts.zip && chmod -R 775 scripts
#         args:
#           chdir: /root/wasm_serverless_deploy
#         become: yes


#     - name: Apps
#       block:
#       - name: Creates directory
#         ansible.builtin.file:
#           path: /root/wasm_serverless_deploy/apps/{{ item }}/
#           state: directory
#         become: yes
#         loop:
#           - fn2
#           - word_count
#       - name: Copy wasm
#         copy:
#           src: ../../target/wasm32-wasi/release/{{ item }}.wasm
#           dest: /root/wasm_serverless_deploy/apps/{{ item }}/app.wasm
#           force: yes
#         become: yes
#         loop:
#           - fn2
#           - word_count

#       - name: Copy yaml
#         copy:
#           src: ../../apps/{{ item }}/app.yaml
#           dest: /root/wasm_serverless_deploy/apps/{{ item }}/app.yaml
#           force: yes
#         become: yes
#         loop:
#           - fn2
#           - word_count
#       - name: Generate app needed files
#         block:
#         - name: Install wordlist
#           shell: pip3 install wordlist
#           args:
#             chdir: /root/wasm_serverless_deploy
#           become: yes
#         - name: Generate app needed files
#           shell: python3 scripts/deploy_cluster/_gen_app_need_data.py
#           args:
#             chdir: /root/wasm_serverless_deploy
#           become: yes


#     - name: Docker Stuff
#       block:
#       - name: Install docker
#         include_tasks: ../install/_ans_install_docker.yml

#       - name: Build the environment Docker image (conditionally)
#         command: ./scripts/docker/WasmEdge/build_image.sh
#         args:
#           chdir: /root/wasm_serverless_deploy
#         become: yes
#         when: build_env == "yes"

#       - name: Build the application Docker image
#         command: ./scripts/docker/Waverless/build_image.sh
#         args:
#           chdir: /root/wasm_serverless_deploy
#         become: yes

#       - name: docker-compose
#         command: docker-compose -v
#         args:
#           chdir: /root/wasm_serverless_deploy
#         become: yes

#       - name: Docker compose up
#         command: docker-compose --compatibility up -d
#         args:
#           chdir: /root/wasm_serverless_deploy
#         become: yes
